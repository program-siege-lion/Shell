判断是否是内建命令
  type cd
  运行结果：cd is a shell builtin 内部命令
  type ifconfig
  运行结果：ifconfig is /usr/sbin/ifconfig，外部文件 文件所在位置 /usr/sbin/ifconfig
  
  内建命令列表
  :	扩展参数列表，执行重定向操作
  .	读取并执行指定文件中的命令（在当前 shell 环境中）
  alias	为指定命令定义一个别名
  bg	将作业以后台模式运行
  bind	将键盘序列绑定到一个 readline 函数或宏
  break	退出 for、while、select 或 until 循环
  builtin	执行指定的 shell 内建命令
  caller	返回活动子函数调用的上下文
  cd	将当前目录切换为指定的目录
  command	执行指定的命令，无需进行通常的 shell 查找
  compgen	为指定单词生成可能的补全匹配
  complete	显示指定的单词是如何补全的
  compopt	修改指定单词的补全选项
  continue	继续执行 for、while、select 或 until 循环的下一次迭代
  declare	声明一个变量或变量类型。
  dirs	显示当前存储目录的列表
  disown	从进程作业表中刪除指定的作业
  echo	将指定字符串输出到 STDOUT
  enable	启用或禁用指定的内建shell命令
  eval	将指定的参数拼接成一个命令，然后执行该命令
  exec	用指定命令替换 shell 进程
  exit	强制 shell 以指定的退出状态码退出
  export	设置子 shell 进程可用的变量
  fc	从历史记录中选择命令列表
  fg	将作业以前台模式运行
  getopts	分析指定的位置参数
  hash	查找并记住指定命令的全路径名
  help	显示帮助文件
  history	显示命令历史记录
  jobs	列出活动作业
  kill	向指定的进程 ID(PID) 发送一个系统信号
  let	计算一个数学表达式中的每个参数
  local	在函数中创建一个作用域受限的变量
  logout	退出登录 shell
  mapfile	从 STDIN 读取数据行，并将其加入索引数组
  popd	从目录栈中删除记录
  printf	使用格式化字符串显示文本
  pushd	向目录栈添加一个目录
  pwd	显示当前工作目录的路径名
  read	从 STDIN 读取一行数据并将其赋给一个变量
  readarray	从 STDIN 读取数据行并将其放入索引数组
  readonly	从 STDIN 读取一行数据并将其赋给一个不可修改的变量
  return	强制函数以某个值退出，这个值可以被调用脚本提取
  set	设置并显示环境变量的值和 shell 属性
  shift	将位置参数依次向下降一个位置
  shopt	打开/关闭控制 shell 可选行为的变量值
  source	读取并执行指定文件中的命令（在当前 shell 环境中）
  suspend	暂停 Shell 的执行，直到收到一个 SIGCONT 信号
  test	基于指定条件返回退出状态码 0 或 1
  times	显示累计的用户和系统时间
  trap	如果收到了指定的系统信号，执行指定的命令
  type	显示指定的单词如果作为命令将会如何被解释
  typeset	声明一个变量或变量类型。
  ulimit	为系统用户设置指定的资源的上限
  umask	为新建的文件和目录设置默认权限
  unalias	刪除指定的别名
  unset	刪除指定的环境变量或 shell 属性
  wait	等待指定的进程完成，并返回退出状态码

alisa命令示例：
  alisa 查看不带设置了别名的命令
  当前进程设置别名,代码示例
  #!/bin/bash
  alisa timestamp=`date +%s`
  begin=`timestamp`  
  sleep 20s
  finish=$(timestamp)
  difference=$((finish - begin))
  echo "run time: ${difference}s"
删除别名
  删除当前进程指定的别名 unalisa ll
  删除当前进程所有别名 unalisa -a

echo -n "string" 默认换行，如果不换行添加-n参数 
echo -e "hello \nWorld" 解析转移字符，要求\n换行
echo "String" \c" 利用-e参数强制，使用转义字符 \c 不换行转移字符

read 读取从键盘输入的数据
  -a array	把读取的数据赋值给数组 array，从下标 0 开始。
  -d delimiter	用字符串 delimiter 指定读取结束的位置，而不是一个换行符（读取到的数据不包括 delimiter）。
  -e	在获取用户输入的时候，对功能键进行编码转换，不会直接显式功能键对应的字符。
  -n num	读取 num 个字符，而不是整行字符。
  -p prompt	显示提示信息，提示内容为 prompt。
  -r	原样读取（Raw mode），不把反斜杠字符解释为转义字符。
  -s	静默模式（Silent mode），不会在屏幕上显示输入的字符。当输入密码和其它确认信息的时候，这是很有必要的。
  -t seconds	设置超时时间，单位为秒。如果用户没有在指定时间内输入完成，那么 read 将会返回一个非 0 的退出状态，表示读取失败。
  -u fd	使用文件描述符 fd 作为输入源，而不是标准输入，类似于重定向。

  案例 多个变量同时读取 赋值：
  #!/bin/bash
  read -p "Enter some information > " name url age
  echo "网站名字：$name"
  echo "网址：$url"
  echo "年龄：$age"
  
  【实例3】在指定时间内输入密码。
  #!/bin/bash
  if
      read -t 20 -sp "Enter password in 20 seconds(once) > " pass1 && printf "\n" &&  #第一次输入密码
      read -t 20 -sp "Enter password in 20 seconds(again)> " pass2 && printf "\n" &&  #第二次输入密码
      [ $pass1 == $pass2 ]  #判断两次输入的密码是否相等
  then
      echo "Valid password"
  else
      echo "Invalid password"
fi
